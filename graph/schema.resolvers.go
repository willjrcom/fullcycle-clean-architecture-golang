package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"

	"github.com/willjrcom/fullcycle-clean-architecture/golang/graph/model"
	"github.com/willjrcom/fullcycle-clean-architecture/golang/internal/domain"
)

// CreateOrder is the resolver for the createOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context, input model.NewOrder) (*model.Order, error) {
	orderCommonAttributes := domain.OrderCommonAttributes{Name: input.Name, Total: input.Total}

	id, err := r.Service.NewOrder(ctx, orderCommonAttributes)

	if err != nil {
		return nil, err
	}

	order := &model.Order{ID: id.String(), Name: input.Name, Total: input.Total}
	return order, nil
}

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	panic(fmt.Errorf("not implemented: Todos - todos"))
}

// Orders is the resolver for the orders field.
func (r *queryResolver) Orders(ctx context.Context) ([]*model.Order, error) {
	orders, err := r.Service.ListOrders(ctx)

	if err != nil {
		return nil, err
	}

	modelOrders := []*model.Order{}
	for _, order := range orders {
		modelOrders = append(modelOrders, &model.Order{ID: order.ID.String(), Name: order.Name, Total: order.Total})
	}
	return modelOrders, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
