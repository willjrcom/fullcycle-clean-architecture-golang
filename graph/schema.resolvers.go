package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"

	"github.com/willjrcom/fullcycle-clean-architecture-golang/graph/model"
	"github.com/willjrcom/fullcycle-clean-architecture-golang/internal/domain"
)

// CreateOrder is the resolver for the createOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context, input model.NewOrder) (*domain.Order, error) {
	orderCommonAttributes := domain.OrderCommonAttributes{Name: input.Name, Total: input.Total}

	id, err := r.Service.NewOrder(ctx, orderCommonAttributes)

	if err != nil {
		return nil, err
	}

	order := &domain.Order{
		ID:                    id,
		OrderCommonAttributes: orderCommonAttributes,
	}

	return order, nil
}

// ID is the resolver for the id field.
func (r *orderResolver) ID(ctx context.Context, obj *domain.Order) (string, error) {
	return obj.ID.String(), nil
}

// Orders is the resolver for the orders field.
func (r *queryResolver) Orders(ctx context.Context) ([]*domain.Order, error) {
	orders, err := r.Service.ListOrders(ctx)

	if err != nil {
		return nil, err
	}

	modelOrders := []*domain.Order{}
	for _, order := range orders {
		modelOrders = append(modelOrders, &domain.Order{ID: order.ID, OrderCommonAttributes: order.OrderCommonAttributes})
	}
	return modelOrders, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Order returns OrderResolver implementation.
func (r *Resolver) Order() OrderResolver { return &orderResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type orderResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
